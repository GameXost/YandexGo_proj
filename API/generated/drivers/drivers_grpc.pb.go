// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: drivers.proto

package proto_files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Drivers_GetDriverProfile_FullMethodName    = "/driver_service.Drivers/GetDriverProfile"
	Drivers_UpdateDriverProfile_FullMethodName = "/driver_service.Drivers/UpdateDriverProfile"
	Drivers_AcceptRide_FullMethodName          = "/driver_service.Drivers/AcceptRide"
	Drivers_CompleteRide_FullMethodName        = "/driver_service.Drivers/CompleteRide"
	Drivers_CancelRide_FullMethodName          = "/driver_service.Drivers/CancelRide"
	Drivers_GetCurrentRide_FullMethodName      = "/driver_service.Drivers/GetCurrentRide"
	Drivers_GetRideHistory_FullMethodName      = "/driver_service.Drivers/GetRideHistory"
	Drivers_UpdateLocation_FullMethodName      = "/driver_service.Drivers/UpdateLocation"
	Drivers_GetNearbyRequests_FullMethodName   = "/driver_service.Drivers/GetNearbyRequests"
	Drivers_GetPassengerInfo_FullMethodName    = "/driver_service.Drivers/GetPassengerInfo"
)

// DriversClient is the client API for Drivers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriversClient interface {
	// операции с профилем водителя
	GetDriverProfile(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*Driver, error)
	UpdateDriverProfile(ctx context.Context, in *UpdateDriverProfileRequest, opts ...grpc.CallOption) (*Driver, error)
	// операции с заказами
	AcceptRide(ctx context.Context, in *RideIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	CompleteRide(ctx context.Context, in *RideIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	CancelRide(ctx context.Context, in *RideIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetCurrentRide(ctx context.Context, in *DriverIdRequest, opts ...grpc.CallOption) (*Ride, error)
	GetRideHistory(ctx context.Context, in *DriverIdRequest, opts ...grpc.CallOption) (*RideHistoryResponse, error)
	// операции с местоположением
	UpdateLocation(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LocationUpdateRequest, StatusResponse], error)
	GetNearbyRequests(ctx context.Context, in *Location, opts ...grpc.CallOption) (*RideRequestsResponse, error)
	// сведения о пассажире
	GetPassengerInfo(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*User, error)
}

type driversClient struct {
	cc grpc.ClientConnInterface
}

func NewDriversClient(cc grpc.ClientConnInterface) DriversClient {
	return &driversClient{cc}
}

func (c *driversClient) GetDriverProfile(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*Driver, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Driver)
	err := c.cc.Invoke(ctx, Drivers_GetDriverProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversClient) UpdateDriverProfile(ctx context.Context, in *UpdateDriverProfileRequest, opts ...grpc.CallOption) (*Driver, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Driver)
	err := c.cc.Invoke(ctx, Drivers_UpdateDriverProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversClient) AcceptRide(ctx context.Context, in *RideIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Drivers_AcceptRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversClient) CompleteRide(ctx context.Context, in *RideIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Drivers_CompleteRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversClient) CancelRide(ctx context.Context, in *RideIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Drivers_CancelRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversClient) GetCurrentRide(ctx context.Context, in *DriverIdRequest, opts ...grpc.CallOption) (*Ride, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ride)
	err := c.cc.Invoke(ctx, Drivers_GetCurrentRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversClient) GetRideHistory(ctx context.Context, in *DriverIdRequest, opts ...grpc.CallOption) (*RideHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RideHistoryResponse)
	err := c.cc.Invoke(ctx, Drivers_GetRideHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversClient) UpdateLocation(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LocationUpdateRequest, StatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Drivers_ServiceDesc.Streams[0], Drivers_UpdateLocation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LocationUpdateRequest, StatusResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Drivers_UpdateLocationClient = grpc.ClientStreamingClient[LocationUpdateRequest, StatusResponse]

func (c *driversClient) GetNearbyRequests(ctx context.Context, in *Location, opts ...grpc.CallOption) (*RideRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RideRequestsResponse)
	err := c.cc.Invoke(ctx, Drivers_GetNearbyRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversClient) GetPassengerInfo(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Drivers_GetPassengerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriversServer is the server API for Drivers service.
// All implementations must embed UnimplementedDriversServer
// for forward compatibility.
type DriversServer interface {
	// операции с профилем водителя
	GetDriverProfile(context.Context, *AuthToken) (*Driver, error)
	UpdateDriverProfile(context.Context, *UpdateDriverProfileRequest) (*Driver, error)
	// операции с заказами
	AcceptRide(context.Context, *RideIdRequest) (*StatusResponse, error)
	CompleteRide(context.Context, *RideIdRequest) (*StatusResponse, error)
	CancelRide(context.Context, *RideIdRequest) (*StatusResponse, error)
	GetCurrentRide(context.Context, *DriverIdRequest) (*Ride, error)
	GetRideHistory(context.Context, *DriverIdRequest) (*RideHistoryResponse, error)
	// операции с местоположением
	UpdateLocation(grpc.ClientStreamingServer[LocationUpdateRequest, StatusResponse]) error
	GetNearbyRequests(context.Context, *Location) (*RideRequestsResponse, error)
	// сведения о пассажире
	GetPassengerInfo(context.Context, *UserIdRequest) (*User, error)
	mustEmbedUnimplementedDriversServer()
}

// UnimplementedDriversServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDriversServer struct{}

func (UnimplementedDriversServer) GetDriverProfile(context.Context, *AuthToken) (*Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverProfile not implemented")
}
func (UnimplementedDriversServer) UpdateDriverProfile(context.Context, *UpdateDriverProfileRequest) (*Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriverProfile not implemented")
}
func (UnimplementedDriversServer) AcceptRide(context.Context, *RideIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRide not implemented")
}
func (UnimplementedDriversServer) CompleteRide(context.Context, *RideIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRide not implemented")
}
func (UnimplementedDriversServer) CancelRide(context.Context, *RideIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRide not implemented")
}
func (UnimplementedDriversServer) GetCurrentRide(context.Context, *DriverIdRequest) (*Ride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentRide not implemented")
}
func (UnimplementedDriversServer) GetRideHistory(context.Context, *DriverIdRequest) (*RideHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRideHistory not implemented")
}
func (UnimplementedDriversServer) UpdateLocation(grpc.ClientStreamingServer[LocationUpdateRequest, StatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedDriversServer) GetNearbyRequests(context.Context, *Location) (*RideRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyRequests not implemented")
}
func (UnimplementedDriversServer) GetPassengerInfo(context.Context, *UserIdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassengerInfo not implemented")
}
func (UnimplementedDriversServer) mustEmbedUnimplementedDriversServer() {}
func (UnimplementedDriversServer) testEmbeddedByValue()                 {}

// UnsafeDriversServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriversServer will
// result in compilation errors.
type UnsafeDriversServer interface {
	mustEmbedUnimplementedDriversServer()
}

func RegisterDriversServer(s grpc.ServiceRegistrar, srv DriversServer) {
	// If the following call pancis, it indicates UnimplementedDriversServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Drivers_ServiceDesc, srv)
}

func _Drivers_GetDriverProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).GetDriverProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drivers_GetDriverProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).GetDriverProfile(ctx, req.(*AuthToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drivers_UpdateDriverProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).UpdateDriverProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drivers_UpdateDriverProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).UpdateDriverProfile(ctx, req.(*UpdateDriverProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drivers_AcceptRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).AcceptRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drivers_AcceptRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).AcceptRide(ctx, req.(*RideIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drivers_CompleteRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).CompleteRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drivers_CompleteRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).CompleteRide(ctx, req.(*RideIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drivers_CancelRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).CancelRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drivers_CancelRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).CancelRide(ctx, req.(*RideIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drivers_GetCurrentRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).GetCurrentRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drivers_GetCurrentRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).GetCurrentRide(ctx, req.(*DriverIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drivers_GetRideHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).GetRideHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drivers_GetRideHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).GetRideHistory(ctx, req.(*DriverIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drivers_UpdateLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriversServer).UpdateLocation(&grpc.GenericServerStream[LocationUpdateRequest, StatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Drivers_UpdateLocationServer = grpc.ClientStreamingServer[LocationUpdateRequest, StatusResponse]

func _Drivers_GetNearbyRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).GetNearbyRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drivers_GetNearbyRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).GetNearbyRequests(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drivers_GetPassengerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversServer).GetPassengerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drivers_GetPassengerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversServer).GetPassengerInfo(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drivers_ServiceDesc is the grpc.ServiceDesc for Drivers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drivers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver_service.Drivers",
	HandlerType: (*DriversServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDriverProfile",
			Handler:    _Drivers_GetDriverProfile_Handler,
		},
		{
			MethodName: "UpdateDriverProfile",
			Handler:    _Drivers_UpdateDriverProfile_Handler,
		},
		{
			MethodName: "AcceptRide",
			Handler:    _Drivers_AcceptRide_Handler,
		},
		{
			MethodName: "CompleteRide",
			Handler:    _Drivers_CompleteRide_Handler,
		},
		{
			MethodName: "CancelRide",
			Handler:    _Drivers_CancelRide_Handler,
		},
		{
			MethodName: "GetCurrentRide",
			Handler:    _Drivers_GetCurrentRide_Handler,
		},
		{
			MethodName: "GetRideHistory",
			Handler:    _Drivers_GetRideHistory_Handler,
		},
		{
			MethodName: "GetNearbyRequests",
			Handler:    _Drivers_GetNearbyRequests_Handler,
		},
		{
			MethodName: "GetPassengerInfo",
			Handler:    _Drivers_GetPassengerInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateLocation",
			Handler:       _Drivers_UpdateLocation_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "drivers.proto",
}
