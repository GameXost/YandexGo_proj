syntax = "proto3";

package client_service;

option go_package = "github.com/GameXost/YandexGo_proj/USERS/API/generated/clients";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "USERS Service API";
        version: "2.0";
        description: "API for managing users and ride operations";
        contact: {
            name: "Yandex Go Project Team";
            url: "https://github.com/GameXost/YandexGo_proj";
            email: "sergejs.dyldin@yandex.ru";
        };
        license: {
            name: "Apache 2.0";
            url: "https://www.apache.org/licenses/LICENSE-2.0.html";
        };
    };
    security_definitions: {
        security: {
            key: "BearerAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
                description: "JWT token as: Bearer <token>";
            }
        }
    };
    security: {
        security_requirement: {
            key: "BearerAuth";
            value: {};
        }
    };
    host: "localhost:9093";
    base_path: "/";
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
};

service Client {
    // операции с пользовательским профилем
    rpc GetUserProfile(google.protobuf.Empty) returns (User){
        option (google.api.http) = {
            get: "/user/profile"
          };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get user profile";
            security: {
                security_requirement: {
                    key: "BearerAuth";
                    value: {};
                }
            };
            operation_id: "getUserProfile";
            tags: "user";
            responses:{
                key: "200"
                value: {
                    description: "successfully returned user profile";
                }
            }
        };
    }

    rpc UpdateUserProfile(UpdateProfileRequest) returns (User){
        option (google.api.http) = {
            put: "/user/profile"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {key: "BearerAuth"; value: {} }
            }
            summary: "Update user profile";
            operation_id: "updateUserProfile";
            tags: "user";
            responses: {
                key: "200"
                value: {
                    description: "Successfully updated user profile";
                }
            }
        };
    }

    // операции с заказами
    rpc RequestRide(RideRequest) returns (Ride){
        option (google.api.http) = {
            post: "/ride/request"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {key: "BearerAuth"; value:{}}
            }
            summary: "request a ride";
            operation_id: "requestRide";
            tags: "rides";
            responses: {
                key: "200"
                value: {
                    description: "Ride request made properly"
                }
            }
        };
    }

    rpc CancelRide(RideIdRequest) returns (StatusResponse){
        option (google.api.http) ={
            post: "/ride/{id}/cancel"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {key: "BearerAuth"; value:{}}
            }
            summary: "Cancel ride";
            operation_id: "cancelRide";
            tags: "rides";
            responses: {
                key: "200"
                value: {
                    description: "Ride canceled successfully";
                }
            }
        };
    }
    rpc GetRideStatus(UserIdRequest) returns (Ride){
        option (google.api.http) = {
            get: "/ride/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {key:"BearerAuth"; value:{}}
            }
            summary: "get ride information";
            operation_id: "getCurrentRide";
            tags: "rides";
            responses: {
                key: "200"
                value: {
                    description: "Successfully received ride status";
                }
            }
        };
    }
    rpc GetRideHistory(UserIdRequest) returns (RideHistoryResponse){
        option (google.api.http) = {
            get: "/ride/history"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {key:"BearerAuth"; value:{}}
            }
            summary: "Get history of last rides";
            operation_id: "get rides history";
            tags: "rides";
            responses: {
                key: "200"
                value: {
                    description: "rides history received successfully";
                }
            }
        };
    }

    // сведения о водителе
    rpc GetDriverLocation(DriverIdRequest) returns (Location){
        option (google.api.http) = {
            get: "/driver/{id}/location"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {key: "BearerAuth"; value: {}}
            }
            summary: "getting driver location lat, lon";
            operation_id: "getDriverLocation";
            tags: "location"
            responses: {
                key: "200"
                value: {
                    description: "driver location received successfully";
                }
            }
        };
    }
    rpc GetDriverInfo(DriverIdRequest) returns (Driver){
        option (google.api.http) = {
            get: "/driver/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {key: "BearerAuth"; value:{}}
            }
            summary: "get info about your driver";
            operation_id: "getDriverInfo";
            tags: "driver";
            responses: {
                key: "200"
                value: {
                    description: "drinver info received successfully";
                }
            }
        };
    }

}

// основные структуры
message User {
    string id = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "uniq user identificator"}];
    string username = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "user's firstname"}];
    string email = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "user's email"}];
    string phone = 4[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description:"user's phone number"}];
}
message Driver{
    string id = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "current driver's uniq identificator"}];
    string username = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "current driver's firstname"}];
    string phone = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "your driver's phone number"}];
    string car_model = 4[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) ={description: "driver's car model"}];
    Location location = 5[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "lat and lon"}];
    string car_make = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "car make"}];
    string car_number =7[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "plate number"}];
    string car_color = 8[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "car color"}];

}

message Location{
    double latitude = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "latitude", example: "55.112313"}];
    double longitude = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "longitude", example: "55.1341"}];
}

message Ride {
    string id = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "uniq id of the ride"}];
    string user_id = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "user's id"}];
    string driver_id = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "driver's id"}];
    Location start_location = 4[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "strart point coodrinates"}];
    Location end_location = 5[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "end point coodrinates"}];
    string status = 6[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "ride status",
        enum: ["pending", "accepted", "in_progress", "completed", "canceled"]
    }];
    int64 timestamp = 7[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "starting time point"}];
  }


message Payment {
    string ride_id = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "nu blyatb id of ride xule"}];
    string user_id = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "ochevidno i zaebalsya"}];
    double amount = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "nahuya i eto pishy money cash nigga"}];
    string payment_method = 4[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "visa cripto mastercard or fucking cash????"}];
    string status = 5[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "status of ebychii oplato we dont have this"}];
}


// основные операции
message AuthToken {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "Auth Token"
            description: "JWT auth token"
        }
    };
    string token = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description: "JWT auth token",
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        pattern: "^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]*$"
    }];
}

message UpdateProfileRequest {
    string id = 1[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "uniq id of user"}];
    string username = 2[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "user's firstname"}];
    string phone = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "user's phone number"}];
    string email = 4[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "user's email address"}];
}

message RideRequest {
    string user_id        = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "User's unique identifier" }];
    Location start_location = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "Pickup coordinates" }];
    Location end_location   = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "Drop-off coordinates" }];
}

message RideIdRequest {
    string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "Ride unique identifier" }];
}

message UserIdRequest {
    string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "User unique identifier" }];
}

message DriverIdRequest {
    string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "Driver unique identifier" }];
}

message StatusResponse {
    bool status  = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "Operation success flag" }];
    string message = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "Additional details or error message" }];
}

message RideHistoryResponse {
    repeated Ride rides = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "List of past rides" }];
}

