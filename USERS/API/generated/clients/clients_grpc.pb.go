// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: clients.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Client_GetUserProfile_FullMethodName    = "/client_service.Client/GetUserProfile"
	Client_UpdateUserProfile_FullMethodName = "/client_service.Client/UpdateUserProfile"
	Client_RequestRide_FullMethodName       = "/client_service.Client/RequestRide"
	Client_CancelRide_FullMethodName        = "/client_service.Client/CancelRide"
	Client_GetRideStatus_FullMethodName     = "/client_service.Client/GetRideStatus"
	Client_GetRideHistory_FullMethodName    = "/client_service.Client/GetRideHistory"
	Client_GetDriverLocation_FullMethodName = "/client_service.Client/GetDriverLocation"
	Client_GetDriverInfo_FullMethodName     = "/client_service.Client/GetDriverInfo"
)

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientClient interface {
	// операции с пользовательским профилем
	GetUserProfile(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*User, error)
	UpdateUserProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*User, error)
	// операции с заказами
	RequestRide(ctx context.Context, in *RideRequest, opts ...grpc.CallOption) (*Ride, error)
	CancelRide(ctx context.Context, in *RideIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetRideStatus(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*Ride, error)
	GetRideHistory(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*RideHistoryResponse, error)
	// сведения о водителе
	GetDriverLocation(ctx context.Context, in *DriverIdRequest, opts ...grpc.CallOption) (*Location, error)
	GetDriverInfo(ctx context.Context, in *DriverIdRequest, opts ...grpc.CallOption) (*Driver, error)
}

type clientClient struct {
	cc grpc.ClientConnInterface
}

func NewClientClient(cc grpc.ClientConnInterface) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) GetUserProfile(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Client_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) UpdateUserProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Client_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) RequestRide(ctx context.Context, in *RideRequest, opts ...grpc.CallOption) (*Ride, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ride)
	err := c.cc.Invoke(ctx, Client_RequestRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) CancelRide(ctx context.Context, in *RideIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Client_CancelRide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) GetRideStatus(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*Ride, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ride)
	err := c.cc.Invoke(ctx, Client_GetRideStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) GetRideHistory(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*RideHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RideHistoryResponse)
	err := c.cc.Invoke(ctx, Client_GetRideHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) GetDriverLocation(ctx context.Context, in *DriverIdRequest, opts ...grpc.CallOption) (*Location, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Location)
	err := c.cc.Invoke(ctx, Client_GetDriverLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) GetDriverInfo(ctx context.Context, in *DriverIdRequest, opts ...grpc.CallOption) (*Driver, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Driver)
	err := c.cc.Invoke(ctx, Client_GetDriverInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServer is the server API for Client service.
// All implementations must embed UnimplementedClientServer
// for forward compatibility.
type ClientServer interface {
	// операции с пользовательским профилем
	GetUserProfile(context.Context, *AuthToken) (*User, error)
	UpdateUserProfile(context.Context, *UpdateProfileRequest) (*User, error)
	// операции с заказами
	RequestRide(context.Context, *RideRequest) (*Ride, error)
	CancelRide(context.Context, *RideIdRequest) (*StatusResponse, error)
	GetRideStatus(context.Context, *UserIdRequest) (*Ride, error)
	GetRideHistory(context.Context, *UserIdRequest) (*RideHistoryResponse, error)
	// сведения о водителе
	GetDriverLocation(context.Context, *DriverIdRequest) (*Location, error)
	GetDriverInfo(context.Context, *DriverIdRequest) (*Driver, error)
	mustEmbedUnimplementedClientServer()
}

// UnimplementedClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServer struct{}

func (UnimplementedClientServer) GetUserProfile(context.Context, *AuthToken) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedClientServer) UpdateUserProfile(context.Context, *UpdateProfileRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedClientServer) RequestRide(context.Context, *RideRequest) (*Ride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRide not implemented")
}
func (UnimplementedClientServer) CancelRide(context.Context, *RideIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRide not implemented")
}
func (UnimplementedClientServer) GetRideStatus(context.Context, *UserIdRequest) (*Ride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRideStatus not implemented")
}
func (UnimplementedClientServer) GetRideHistory(context.Context, *UserIdRequest) (*RideHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRideHistory not implemented")
}
func (UnimplementedClientServer) GetDriverLocation(context.Context, *DriverIdRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverLocation not implemented")
}
func (UnimplementedClientServer) GetDriverInfo(context.Context, *DriverIdRequest) (*Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverInfo not implemented")
}
func (UnimplementedClientServer) mustEmbedUnimplementedClientServer() {}
func (UnimplementedClientServer) testEmbeddedByValue()                {}

// UnsafeClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServer will
// result in compilation errors.
type UnsafeClientServer interface {
	mustEmbedUnimplementedClientServer()
}

func RegisterClientServer(s grpc.ServiceRegistrar, srv ClientServer) {
	// If the following call pancis, it indicates UnimplementedClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Client_ServiceDesc, srv)
}

func _Client_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).GetUserProfile(ctx, req.(*AuthToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).UpdateUserProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_RequestRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).RequestRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_RequestRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).RequestRide(ctx, req.(*RideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_CancelRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RideIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).CancelRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_CancelRide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).CancelRide(ctx, req.(*RideIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_GetRideStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).GetRideStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_GetRideStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).GetRideStatus(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_GetRideHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).GetRideHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_GetRideHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).GetRideHistory(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_GetDriverLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).GetDriverLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_GetDriverLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).GetDriverLocation(ctx, req.(*DriverIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_GetDriverInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).GetDriverInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_GetDriverInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).GetDriverInfo(ctx, req.(*DriverIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Client_ServiceDesc is the grpc.ServiceDesc for Client service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Client_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client_service.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProfile",
			Handler:    _Client_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _Client_UpdateUserProfile_Handler,
		},
		{
			MethodName: "RequestRide",
			Handler:    _Client_RequestRide_Handler,
		},
		{
			MethodName: "CancelRide",
			Handler:    _Client_CancelRide_Handler,
		},
		{
			MethodName: "GetRideStatus",
			Handler:    _Client_GetRideStatus_Handler,
		},
		{
			MethodName: "GetRideHistory",
			Handler:    _Client_GetRideHistory_Handler,
		},
		{
			MethodName: "GetDriverLocation",
			Handler:    _Client_GetDriverLocation_Handler,
		},
		{
			MethodName: "GetDriverInfo",
			Handler:    _Client_GetDriverInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clients.proto",
}
