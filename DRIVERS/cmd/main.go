/*
 * Driver Service API
 *
 * API for managing drivers and ride operations
 *
 * API version: 2.0
 * Contact: sergejs.dyldin@yandex.ru
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"crypto/rsa"
	"fmt"
	"log"
	"net"
	"net/http"
	"strings"

	// "sync"

	"github.com/GameXost/YandexGo_proj/DRIVERS/internal/prometh"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/redis/go-redis/v9"
	"github.com/segmentio/kafka-go"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	pb "github.com/GameXost/YandexGo_proj/DRIVERS/API/generated/drivers"
	"github.com/GameXost/YandexGo_proj/DRIVERS/internal/config"
	"github.com/GameXost/YandexGo_proj/DRIVERS/internal/repository"
	server "github.com/GameXost/YandexGo_proj/DRIVERS/internal/server"
	"github.com/GameXost/YandexGo_proj/DRIVERS/internal/services"
)

var publicKey *rsa.PublicKey

func main() {
	ctx := context.Background()
	// Prometheus порт теперь из config

	// 1. Load config
	cfg, err := config.LoadConfig("config/config.yaml")
	if err != nil {
		log.Fatalf("failed to load config: %v", err)
	}
	// 2. Load keys
	publicKey, err := server.LoadPublicKey(cfg.JWT.PublicKeyPath)
	if err != nil {
		log.Fatalf("failed to load public key: %v", err)
	}
	privateKey, err := server.LoadPrivateKey(cfg.JWT.PrivateKeyPath)
	if err != nil {
		log.Fatalf("failed to load private key: %v", err)
	}
	_ = privateKey
	prometh.InitPrometheus(cfg.Prometheus.Port)

	// 3. DB connection
	connStr := fmt.Sprintf(
		"postgres://%s:%s@%s:%d/%s?sslmode=%s",

		cfg.Database.User, cfg.Database.Password, cfg.Database.Host, cfg.Database.Port, cfg.Database.Name, cfg.Database.SSLMode,
	)
	// connStr := "postgres://gamexost:gopython@localhost:5432/postgres?sslmode=disable"
	dbpool, err := pgxpool.New(ctx, connStr)
	if err != nil {
		log.Fatalf("Unable to create pool: %v", err)
	}
	defer dbpool.Close()
	log.Println("PGX working")

	// 4. REDIS connection
	redisAddr := fmt.Sprintf("%s:%d", cfg.Redis.Host, cfg.Redis.Port)
	redisClient := redis.NewClient(&redis.Options{
		Addr:     redisAddr,
		Password: cfg.Redis.Password,
		DB:       cfg.Redis.DB,
	})
	// Можно добавить ping/healthcheck при необходимости
	if err := redisClient.Ping(ctx).Err(); err != nil {
		log.Fatalf("failed to connect to Redis: %v", err)
	}
	log.Println("Redis working")

	// 5. Kafka connection
	kafkaWriter := kafka.NewWriter(kafka.WriterConfig{
		Brokers: cfg.Kafka.Brokers,
		Topic:   cfg.Kafka.Topics.RideUpdates,
	})
	defer kafkaWriter.Close()
	log.Println("Kafka working")

	repo := repository.NewDriverRepository(dbpool)
	driverService := services.NewDriverService(repo, redisClient, redisClient, kafkaWriter)

	// --- НАЧАЛО блока нагрузки ---
	// var wg sync.WaitGroup
	// const (
	// 	numWorkers           = 1000   // Количество параллельных горутин
	// 	numRequestsPerWorker = 100000 // Сколько запросов делает каждая горутина
	// )
	// for w := 0; w < numWorkers; w++ {
	// 	wg.Add(1)
	// 	go func(workerID int) {
	// 		defer wg.Done()
	// 		for i := 0; i < numRequestsPerWorker; i++ {
	// 			_, err := driverService.GetDriverProfile(ctx, "1")
	// 			if err != nil {
	// 				log.Printf("[worker %d] GetDriverProfile error: %v", workerID, err)
	// 			}
	// 			// log.Printf("Driver: %+v, %s, %s, %s, %s", driver, driver.CarColor, driver.CarMark, driver.Email, driver.Phone)
	// 			// Можно добавить небольшую задержку, если нужно
	// 			// time.Sleep(1 * time.Millisecond)
	// 		}
	// 	}(w)
	// }
	// wg.Wait()
	// log.Println("All requests finished")
	// --- КОНЕЦ блока нагрузки ---

	// --- Kafka consumer ---
	kafkaReader := kafka.NewReader(kafka.ReaderConfig{
		Brokers:  cfg.Kafka.Brokers,
		Topic:    cfg.Kafka.Topics.RideUpdates,
		GroupID:  "driver-service",
		MinBytes: 10e3,
		MaxBytes: 10e6,
	})
	go driverService.StartKafkaConsumer(ctx, kafkaReader)

	// for i := 0; i < 1_000; i++ {
	// 	driver, err := driverService.GetDriverProfile(ctx, "1")
	// 	if err != nil {
	// 		log.Printf("GetDriverProfile error: %v", err)
	// 	} else {
	// 		log.Printf("Driver: %+v", driver)
	// 	}
	// }
	// log.Printf("Auth disabled: %v", cfg.Auth.Disabled)

	// server up
	sv := &server.DriverServer{
		Service: driverService,
	}

	// gRPC server up
	grpcServer := grpc.NewServer(
		grpc.UnaryInterceptor(server.AuthInterceptor(publicKey, cfg.Auth.Disabled)),
	)
	pb.RegisterDriversServer(grpcServer, sv)
	grpcListener, err := net.Listen("tcp", cfg.Server.Port)
	if err != nil {
		log.Fatalf("Unable to listen on %s: %v", cfg.Server.Port, err)
	}
	go func() {
		log.Printf("GRPC server listening on %s", cfg.Server.Port)
		if err := grpcServer.Serve(grpcListener); err != nil {
			log.Fatalf("Unable to start grpc server: %v", err)
		}
	}()

	// gRPC gateway up
	mux := runtime.NewServeMux(
		runtime.WithIncomingHeaderMatcher(customHeaderMatcher),
	)

	opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
	err = pb.RegisterDriversHandlerFromEndpoint(ctx, mux, "localhost"+cfg.Server.Port, opts)
	if err != nil {
		log.Fatalf("Unable to register handler: %v", err)
	}

	// HTTP порт теперь из config
	log.Println("Mux gateway Listening on", cfg.Server.HTTPPort)
	if err := http.ListenAndServe(cfg.Server.HTTPPort, allowCORS(server.JWTHTTPMiddleware(publicKey)(mux))); err != nil {
		log.Fatalf("Unable to listen on %s: %v", cfg.Server.HTTPPort, err)
	}
}

// для работы с свагером
func allowCORS(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Println("HEADERS:", r.Header) // ← добавь это!
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}
		h.ServeHTTP(w, r)
	})
}

// fix grpc + http
func customHeaderMatcher(key string) (string, bool) {
	fmt.Println("Matcher sees header:", key)
	switch strings.ToLower(key) {
	case "authorization":
		return "authorization", true // обязательно маленькими!
	default:
		return runtime.DefaultHeaderMatcher(key)
	}
}
